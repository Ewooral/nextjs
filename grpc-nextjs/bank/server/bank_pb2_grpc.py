# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bank_pb2 as bank__pb2


class AuthServiceStub(object):
    """Authentication service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/banking.AuthService/Register',
                request_serializer=bank__pb2.RegisterRequest.SerializeToString,
                response_deserializer=bank__pb2.RegisterResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/banking.AuthService/Login',
                request_serializer=bank__pb2.LoginRequest.SerializeToString,
                response_deserializer=bank__pb2.LoginResponse.FromString,
                )
        self.OTP = channel.unary_unary(
                '/banking.AuthService/OTP',
                request_serializer=bank__pb2.OTPRequest.SerializeToString,
                response_deserializer=bank__pb2.OTPResponse.FromString,
                )
        self.VerifyOTP = channel.unary_unary(
                '/banking.AuthService/VerifyOTP',
                request_serializer=bank__pb2.VerifyOTPRequest.SerializeToString,
                response_deserializer=bank__pb2.VerifyOTPResponse.FromString,
                )
        self.ResetPassword = channel.unary_unary(
                '/banking.AuthService/ResetPassword',
                request_serializer=bank__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=bank__pb2.ResetPasswordResponse.FromString,
                )


class AuthServiceServicer(object):
    """Authentication service
    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=bank__pb2.RegisterRequest.FromString,
                    response_serializer=bank__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=bank__pb2.LoginRequest.FromString,
                    response_serializer=bank__pb2.LoginResponse.SerializeToString,
            ),
            'OTP': grpc.unary_unary_rpc_method_handler(
                    servicer.OTP,
                    request_deserializer=bank__pb2.OTPRequest.FromString,
                    response_serializer=bank__pb2.OTPResponse.SerializeToString,
            ),
            'VerifyOTP': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyOTP,
                    request_deserializer=bank__pb2.VerifyOTPRequest.FromString,
                    response_serializer=bank__pb2.VerifyOTPResponse.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=bank__pb2.ResetPasswordRequest.FromString,
                    response_serializer=bank__pb2.ResetPasswordResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banking.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Authentication service
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AuthService/Register',
            bank__pb2.RegisterRequest.SerializeToString,
            bank__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AuthService/Login',
            bank__pb2.LoginRequest.SerializeToString,
            bank__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AuthService/OTP',
            bank__pb2.OTPRequest.SerializeToString,
            bank__pb2.OTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyOTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AuthService/VerifyOTP',
            bank__pb2.VerifyOTPRequest.SerializeToString,
            bank__pb2.VerifyOTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AuthService/ResetPassword',
            bank__pb2.ResetPasswordRequest.SerializeToString,
            bank__pb2.ResetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UsersServiceStub(object):
    """CRUD service for managing users
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/banking.UsersService/Create',
                request_serializer=bank__pb2.CRUDRequest.SerializeToString,
                response_deserializer=bank__pb2.CRUDResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/banking.UsersService/Read',
                request_serializer=bank__pb2.CRUDRequest.SerializeToString,
                response_deserializer=bank__pb2.CRUDResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/banking.UsersService/Update',
                request_serializer=bank__pb2.CRUDRequest.SerializeToString,
                response_deserializer=bank__pb2.CRUDResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/banking.UsersService/Delete',
                request_serializer=bank__pb2.CRUDRequest.SerializeToString,
                response_deserializer=bank__pb2.CRUDResponse.FromString,
                )


class UsersServiceServicer(object):
    """CRUD service for managing users
    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=bank__pb2.CRUDRequest.FromString,
                    response_serializer=bank__pb2.CRUDResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=bank__pb2.CRUDRequest.FromString,
                    response_serializer=bank__pb2.CRUDResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=bank__pb2.CRUDRequest.FromString,
                    response_serializer=bank__pb2.CRUDResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=bank__pb2.CRUDRequest.FromString,
                    response_serializer=bank__pb2.CRUDResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banking.UsersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsersService(object):
    """CRUD service for managing users
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.UsersService/Create',
            bank__pb2.CRUDRequest.SerializeToString,
            bank__pb2.CRUDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.UsersService/Read',
            bank__pb2.CRUDRequest.SerializeToString,
            bank__pb2.CRUDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.UsersService/Update',
            bank__pb2.CRUDRequest.SerializeToString,
            bank__pb2.CRUDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.UsersService/Delete',
            bank__pb2.CRUDRequest.SerializeToString,
            bank__pb2.CRUDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminServiceStub(object):
    """Admin service for administrative operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListUsers = channel.unary_unary(
                '/banking.AdminService/ListUsers',
                request_serializer=bank__pb2.AdminRequest.SerializeToString,
                response_deserializer=bank__pb2.AdminResponse.FromString,
                )
        self.CreateAdminUser = channel.unary_unary(
                '/banking.AdminService/CreateAdminUser',
                request_serializer=bank__pb2.CreateAdminUserRequest.SerializeToString,
                response_deserializer=bank__pb2.CreateAdminUserResponse.FromString,
                )
        self.UpdateUserRole = channel.unary_unary(
                '/banking.AdminService/UpdateUserRole',
                request_serializer=bank__pb2.UpdateUserRoleRequest.SerializeToString,
                response_deserializer=bank__pb2.UpdateUserRoleResponse.FromString,
                )
        self.BanUser = channel.unary_unary(
                '/banking.AdminService/BanUser',
                request_serializer=bank__pb2.BanUserRequest.SerializeToString,
                response_deserializer=bank__pb2.BanUserResponse.FromString,
                )
        self.ViewUserActivityLog = channel.unary_unary(
                '/banking.AdminService/ViewUserActivityLog',
                request_serializer=bank__pb2.ViewUserActivityLogRequest.SerializeToString,
                response_deserializer=bank__pb2.ViewUserActivityLogResponse.FromString,
                )
        self.GenerateReports = channel.unary_unary(
                '/banking.AdminService/GenerateReports',
                request_serializer=bank__pb2.GenerateReportsRequest.SerializeToString,
                response_deserializer=bank__pb2.GenerateReportsResponse.FromString,
                )
        self.ConfigureSystemSettings = channel.unary_unary(
                '/banking.AdminService/ConfigureSystemSettings',
                request_serializer=bank__pb2.ConfigureSystemSettingsRequest.SerializeToString,
                response_deserializer=bank__pb2.ConfigureSystemSettingsResponse.FromString,
                )


class AdminServiceServicer(object):
    """Admin service for administrative operations
    """

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdminUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BanUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewUserActivityLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateReports(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSystemSettings(self, request, context):
        """... (Other admin-specific operations)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=bank__pb2.AdminRequest.FromString,
                    response_serializer=bank__pb2.AdminResponse.SerializeToString,
            ),
            'CreateAdminUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdminUser,
                    request_deserializer=bank__pb2.CreateAdminUserRequest.FromString,
                    response_serializer=bank__pb2.CreateAdminUserResponse.SerializeToString,
            ),
            'UpdateUserRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserRole,
                    request_deserializer=bank__pb2.UpdateUserRoleRequest.FromString,
                    response_serializer=bank__pb2.UpdateUserRoleResponse.SerializeToString,
            ),
            'BanUser': grpc.unary_unary_rpc_method_handler(
                    servicer.BanUser,
                    request_deserializer=bank__pb2.BanUserRequest.FromString,
                    response_serializer=bank__pb2.BanUserResponse.SerializeToString,
            ),
            'ViewUserActivityLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewUserActivityLog,
                    request_deserializer=bank__pb2.ViewUserActivityLogRequest.FromString,
                    response_serializer=bank__pb2.ViewUserActivityLogResponse.SerializeToString,
            ),
            'GenerateReports': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateReports,
                    request_deserializer=bank__pb2.GenerateReportsRequest.FromString,
                    response_serializer=bank__pb2.GenerateReportsResponse.SerializeToString,
            ),
            'ConfigureSystemSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSystemSettings,
                    request_deserializer=bank__pb2.ConfigureSystemSettingsRequest.FromString,
                    response_serializer=bank__pb2.ConfigureSystemSettingsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'banking.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """Admin service for administrative operations
    """

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/ListUsers',
            bank__pb2.AdminRequest.SerializeToString,
            bank__pb2.AdminResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdminUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/CreateAdminUser',
            bank__pb2.CreateAdminUserRequest.SerializeToString,
            bank__pb2.CreateAdminUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/UpdateUserRole',
            bank__pb2.UpdateUserRoleRequest.SerializeToString,
            bank__pb2.UpdateUserRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BanUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/BanUser',
            bank__pb2.BanUserRequest.SerializeToString,
            bank__pb2.BanUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ViewUserActivityLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/ViewUserActivityLog',
            bank__pb2.ViewUserActivityLogRequest.SerializeToString,
            bank__pb2.ViewUserActivityLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateReports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/GenerateReports',
            bank__pb2.GenerateReportsRequest.SerializeToString,
            bank__pb2.GenerateReportsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSystemSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/banking.AdminService/ConfigureSystemSettings',
            bank__pb2.ConfigureSystemSettingsRequest.SerializeToString,
            bank__pb2.ConfigureSystemSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
