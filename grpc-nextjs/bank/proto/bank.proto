syntax = "proto3";

package banking;

option go_package = "github.com/example/banking/proto";



// Authentication service
service AuthService {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc OTP(OTPRequest) returns (OTPResponse);
  rpc VerifyOTP(VerifyOTPRequest) returns (VerifyOTPResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
}

// CRUD service for managing users
service UsersService {
  rpc Create(CRUDRequest) returns (CRUDResponse);
  rpc Read(CRUDRequest) returns (CRUDResponse);
  rpc Update(CRUDRequest) returns (CRUDResponse);
  rpc Delete(CRUDRequest) returns (CRUDResponse);
}

// Admin service for administrative operations
service AdminService {
  rpc ListUsers(AdminRequest) returns (AdminResponse);
  rpc CreateAdminUser(CreateAdminUserRequest) returns (CreateAdminUserResponse);
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
  rpc BanUser(BanUserRequest) returns (BanUserResponse);
  rpc ViewUserActivityLog(ViewUserActivityLogRequest) returns (ViewUserActivityLogResponse);
  rpc GenerateReports(GenerateReportsRequest) returns (GenerateReportsResponse);
  rpc ConfigureSystemSettings(ConfigureSystemSettingsRequest) returns (ConfigureSystemSettingsResponse);
  // ... (Other admin-specific operations)
}


// User roles
enum Role {
  ADMIN = 0;
  SUPERVISOR = 1;
  USER = 2;
}

// User information
message User {
  string id = 1; // Unique identifier for user
  string username = 2; // Username for login
  string password = 3; // Hashed password
  string email = 4; // Email address of the user
  Role role = 5; // Role of the user
  // ... Additional user information like name, email, etc.
}

// Register request
message RegisterRequest {
  string username = 1;
  string password = 2; // Plain text password for hashing
  string email = 3;
  Role role = 4; // Desired user role
}

// Register response
message RegisterResponse {
  User user = 1; // Registered user information
}

// Login request
message LoginRequest {
  string email = 1;
  string password = 2; // Plain text password for verification
}

// Login response
message LoginResponse {
  bool success = 1; // Login success flag
  string token = 2; // JWT token for authorized access
  Role role = 3; // Logged in user's role
  User user = 4; // User information
}

// OTP request
message OTPRequest {
  string email = 1;
}

// OTP response
message OTPResponse {
  string otp = 1; // One-time password
  int32 expires_at = 2; // Timestamp for OTP expiry
}

// Verify OTP request
message VerifyOTPRequest {
  string email = 1;
  string otp = 2;
}

// Verify OTP response
message VerifyOTPResponse {
  bool valid = 1; // OTP verification success flag
}

// Reset password request
message ResetPasswordRequest {
  string email = 1;
  string new_password = 2; // Plain text password for hashing
}

// Reset password response
message ResetPasswordResponse {
  bool success = 1; // Password reset success flag
}

// CRUD request message
message CRUDRequest {
  string user_id = 1; // User ID for CRUD operation (CRUD on supervisor/user)
  // ... Message specific to the CRUD operation (create/read/update/delete)
}

// CRUD response message
message CRUDResponse {
  bool success = 1; // Operation success flag
  // ... Message specific to the CRUD operation (created/read/updated/deleted user)
}


// Admin-specific request
message AdminRequest {
  // ... Message specific to admin operations (e.g., list users)
}

// Admin-specific response
message AdminResponse {
  // ... Message specific to admin operations (e.g., list of users)
}

// Admin-specific request for CreateAdminUser
message CreateAdminUserRequest {
  string email = 1;
  string password = 2; // Plain text password for hashing
}

// Admin-specific response for CreateAdminUser
message CreateAdminUserResponse {
  User admin_user = 1; // Created admin user information
}

// Admin-specific request for UpdateUserRole
message UpdateUserRoleRequest {
  string user_id = 1;
  Role new_role = 2; // New role for the user
}

// Admin-specific response for UpdateUserRole
message UpdateUserRoleResponse {
  bool success = 1; // Operation success flag
}

// Admin-specific request for BanUser
message BanUserRequest {
  string user_id = 1;
}

// Admin-specific response for BanUser
message BanUserResponse {
  bool success = 1; // Operation success flag
}

// Admin-specific request for ViewUserActivityLog
message ViewUserActivityLogRequest {
  string user_id = 1;
}

// Admin-specific response for ViewUserActivityLog
message ViewUserActivityLogResponse {
  // ... Message containing user activity log
}

// Admin-specific request for GenerateReports
message GenerateReportsRequest {
  // ... Parameters for report generation
}

// Admin-specific response for GenerateReports
message GenerateReportsResponse {
  // ... Message containing generated reports
}

// Admin-specific request for ConfigureSystemSettings
message ConfigureSystemSettingsRequest {
  // ... Parameters for configuring system settings
}

// Admin-specific response for ConfigureSystemSettings
message ConfigureSystemSettingsResponse {
  bool success = 1; // Operation success flag
}
