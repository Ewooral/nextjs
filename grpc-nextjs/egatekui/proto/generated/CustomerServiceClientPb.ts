/**
 * @fileoverview gRPC-Web generated client stub for Customer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: Customer.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as Customer_pb from './Customer_pb';


export class CustomerAccountClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateCustomerGenerateOTP = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerTempOTRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerTempOTRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  createCustomerGenerateOTP(
    request: Customer_pb.CustomerTempOTRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  createCustomerGenerateOTP(
    request: Customer_pb.CustomerTempOTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  createCustomerGenerateOTP(
    request: Customer_pb.CustomerTempOTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
        request,
        metadata || {},
        this.methodDescriptorCreateCustomerGenerateOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerGenerateOTP',
    request,
    metadata || {},
    this.methodDescriptorCreateCustomerGenerateOTP);
  }

  methodDescriptorCreateCustomerVerifyOTP = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerTempVerifyOTRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerTempVerifyOTRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  createCustomerVerifyOTP(
    request: Customer_pb.CustomerTempVerifyOTRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  createCustomerVerifyOTP(
    request: Customer_pb.CustomerTempVerifyOTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  createCustomerVerifyOTP(
    request: Customer_pb.CustomerTempVerifyOTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
        request,
        metadata || {},
        this.methodDescriptorCreateCustomerVerifyOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerVerifyOTP',
    request,
    metadata || {},
    this.methodDescriptorCreateCustomerVerifyOTP);
  }

  methodDescriptorCreateCustomerAccount = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/CreateCustomerAccount',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerAccountMessage,
    Customer_pb.LoginResponseMessage,
    (request: Customer_pb.CustomerAccountMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.LoginResponseMessage.deserializeBinary
  );

  createCustomerAccount(
    request: Customer_pb.CustomerAccountMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.LoginResponseMessage>;

  createCustomerAccount(
    request: Customer_pb.CustomerAccountMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.LoginResponseMessage>;

  createCustomerAccount(
    request: Customer_pb.CustomerAccountMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/CreateCustomerAccount',
        request,
        metadata || {},
        this.methodDescriptorCreateCustomerAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/CreateCustomerAccount',
    request,
    metadata || {},
    this.methodDescriptorCreateCustomerAccount);
  }

  methodDescriptorLoginUser = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/LoginUser',
    grpcWeb.MethodType.UNARY,
    Customer_pb.LoginRequestMessage,
    Customer_pb.LoginResponseMessage,
    (request: Customer_pb.LoginRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.LoginResponseMessage.deserializeBinary
  );

  loginUser(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.LoginResponseMessage>;

  loginUser(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.LoginResponseMessage>;

  loginUser(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/LoginUser',
        request,
        metadata || {},
        this.methodDescriptorLoginUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/LoginUser',
    request,
    metadata || {},
    this.methodDescriptorLoginUser);
  }

  methodDescriptorLoginUserBusiness = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/LoginUserBusiness',
    grpcWeb.MethodType.UNARY,
    Customer_pb.LoginRequestMessage,
    Customer_pb.LoginResponseMessage,
    (request: Customer_pb.LoginRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.LoginResponseMessage.deserializeBinary
  );

  loginUserBusiness(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.LoginResponseMessage>;

  loginUserBusiness(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.LoginResponseMessage>;

  loginUserBusiness(
    request: Customer_pb.LoginRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.LoginResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/LoginUserBusiness',
        request,
        metadata || {},
        this.methodDescriptorLoginUserBusiness,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/LoginUserBusiness',
    request,
    metadata || {},
    this.methodDescriptorLoginUserBusiness);
  }

  methodDescriptorResetUserPassword = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ResetUserPassword',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerResetPasswordRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerResetPasswordRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  resetUserPassword(
    request: Customer_pb.CustomerResetPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  resetUserPassword(
    request: Customer_pb.CustomerResetPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  resetUserPassword(
    request: Customer_pb.CustomerResetPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ResetUserPassword',
        request,
        metadata || {},
        this.methodDescriptorResetUserPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword',
    request,
    metadata || {},
    this.methodDescriptorResetUserPassword);
  }

  methodDescriptorResetUserPassword_ForgotPassword = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerPasswordResetRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerPasswordResetRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  resetUserPassword_ForgotPassword(
    request: Customer_pb.CustomerPasswordResetRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  resetUserPassword_ForgotPassword(
    request: Customer_pb.CustomerPasswordResetRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  resetUserPassword_ForgotPassword(
    request: Customer_pb.CustomerPasswordResetRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
        request,
        metadata || {},
        this.methodDescriptorResetUserPassword_ForgotPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPassword_ForgotPassword',
    request,
    metadata || {},
    this.methodDescriptorResetUserPassword_ForgotPassword);
  }

  methodDescriptorResetUserPIN = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ResetUserPIN',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerPINResetRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerPINResetRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  resetUserPIN(
    request: Customer_pb.CustomerPINResetRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  resetUserPIN(
    request: Customer_pb.CustomerPINResetRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  resetUserPIN(
    request: Customer_pb.CustomerPINResetRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ResetUserPIN',
        request,
        metadata || {},
        this.methodDescriptorResetUserPIN,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN',
    request,
    metadata || {},
    this.methodDescriptorResetUserPIN);
  }

  methodDescriptorResetUserPIN_ForgotPIN = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerPINResetRequestMessageOld,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerPINResetRequestMessageOld) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  resetUserPIN_ForgotPIN(
    request: Customer_pb.CustomerPINResetRequestMessageOld,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  resetUserPIN_ForgotPIN(
    request: Customer_pb.CustomerPINResetRequestMessageOld,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  resetUserPIN_ForgotPIN(
    request: Customer_pb.CustomerPINResetRequestMessageOld,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
        request,
        metadata || {},
        this.methodDescriptorResetUserPIN_ForgotPIN,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ResetUserPIN_ForgotPIN',
    request,
    metadata || {},
    this.methodDescriptorResetUserPIN_ForgotPIN);
  }

  methodDescriptorGenerateOTPBeforeLogin = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
    grpcWeb.MethodType.UNARY,
    Customer_pb.OTRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.OTRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  generateOTPBeforeLogin(
    request: Customer_pb.OTRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  generateOTPBeforeLogin(
    request: Customer_pb.OTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  generateOTPBeforeLogin(
    request: Customer_pb.OTRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
        request,
        metadata || {},
        this.methodDescriptorGenerateOTPBeforeLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GenerateOTPBeforeLogin',
    request,
    metadata || {},
    this.methodDescriptorGenerateOTPBeforeLogin);
  }

  methodDescriptorVerifyTransOTPNow = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/VerifyTransOTPNow',
    grpcWeb.MethodType.UNARY,
    Customer_pb.VerifyOTPRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.VerifyOTPRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  verifyTransOTPNow(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  verifyTransOTPNow(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  verifyTransOTPNow(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/VerifyTransOTPNow',
        request,
        metadata || {},
        this.methodDescriptorVerifyTransOTPNow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/VerifyTransOTPNow',
    request,
    metadata || {},
    this.methodDescriptorVerifyTransOTPNow);
  }

  methodDescriptorGenerateOTPSendToBothEmailandSms = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GenerateOTPSendToBothEmailandSms',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerOTForEmailRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerOTForEmailRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  generateOTPSendToBothEmailandSms(
    request: Customer_pb.CustomerOTForEmailRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  generateOTPSendToBothEmailandSms(
    request: Customer_pb.CustomerOTForEmailRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  generateOTPSendToBothEmailandSms(
    request: Customer_pb.CustomerOTForEmailRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GenerateOTPSendToBothEmailandSms',
        request,
        metadata || {},
        this.methodDescriptorGenerateOTPSendToBothEmailandSms,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GenerateOTPSendToBothEmailandSms',
    request,
    metadata || {},
    this.methodDescriptorGenerateOTPSendToBothEmailandSms);
  }

  methodDescriptorCustomerProfileUpdate = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/CustomerProfileUpdate',
    grpcWeb.MethodType.UNARY,
    Customer_pb.VerifyOTPRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.VerifyOTPRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  customerProfileUpdate(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  customerProfileUpdate(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  customerProfileUpdate(
    request: Customer_pb.VerifyOTPRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/CustomerProfileUpdate',
        request,
        metadata || {},
        this.methodDescriptorCustomerProfileUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/CustomerProfileUpdate',
    request,
    metadata || {},
    this.methodDescriptorCustomerProfileUpdate);
  }

  methodDescriptorGetEganowSignupCountryList = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GetEganowSignupCountryList',
    grpcWeb.MethodType.UNARY,
    Customer_pb.EmptyMessage,
    Customer_pb.CountryListMessage,
    (request: Customer_pb.EmptyMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.CountryListMessage.deserializeBinary
  );

  getEganowSignupCountryList(
    request: Customer_pb.EmptyMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.CountryListMessage>;

  getEganowSignupCountryList(
    request: Customer_pb.EmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.CountryListMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.CountryListMessage>;

  getEganowSignupCountryList(
    request: Customer_pb.EmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.CountryListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GetEganowSignupCountryList',
        request,
        metadata || {},
        this.methodDescriptorGetEganowSignupCountryList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GetEganowSignupCountryList',
    request,
    metadata || {},
    this.methodDescriptorGetEganowSignupCountryList);
  }

  methodDescriptorCreateOtherBusinessUser = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/CreateOtherBusinessUser',
    grpcWeb.MethodType.UNARY,
    Customer_pb.BusinessUserMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.BusinessUserMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  createOtherBusinessUser(
    request: Customer_pb.BusinessUserMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  createOtherBusinessUser(
    request: Customer_pb.BusinessUserMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  createOtherBusinessUser(
    request: Customer_pb.BusinessUserMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/CreateOtherBusinessUser',
        request,
        metadata || {},
        this.methodDescriptorCreateOtherBusinessUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/CreateOtherBusinessUser',
    request,
    metadata || {},
    this.methodDescriptorCreateOtherBusinessUser);
  }

  methodDescriptorGetAllOtherBusinessUserByCustomer = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
    grpcWeb.MethodType.UNARY,
    Customer_pb.BizUserSearchRequestMessage,
    Customer_pb.BusinessUserResponseListMessage,
    (request: Customer_pb.BizUserSearchRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.BusinessUserResponseListMessage.deserializeBinary
  );

  getAllOtherBusinessUserByCustomer(
    request: Customer_pb.BizUserSearchRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.BusinessUserResponseListMessage>;

  getAllOtherBusinessUserByCustomer(
    request: Customer_pb.BizUserSearchRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.BusinessUserResponseListMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.BusinessUserResponseListMessage>;

  getAllOtherBusinessUserByCustomer(
    request: Customer_pb.BizUserSearchRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.BusinessUserResponseListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
        request,
        metadata || {},
        this.methodDescriptorGetAllOtherBusinessUserByCustomer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GetAllOtherBusinessUserByCustomer',
    request,
    metadata || {},
    this.methodDescriptorGetAllOtherBusinessUserByCustomer);
  }

  methodDescriptorApproveNewOtherBusinessUser = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
    grpcWeb.MethodType.UNARY,
    Customer_pb.BizUserToApproveMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.BizUserToApproveMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  approveNewOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  approveNewOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  approveNewOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
        request,
        metadata || {},
        this.methodDescriptorApproveNewOtherBusinessUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ApproveNewOtherBusinessUser',
    request,
    metadata || {},
    this.methodDescriptorApproveNewOtherBusinessUser);
  }

  methodDescriptorDisapproveApproveOtherBusinessUser = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
    grpcWeb.MethodType.UNARY,
    Customer_pb.BizUserToApproveMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.BizUserToApproveMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  disapproveApproveOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  disapproveApproveOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  disapproveApproveOtherBusinessUser(
    request: Customer_pb.BizUserToApproveMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
        request,
        metadata || {},
        this.methodDescriptorDisapproveApproveOtherBusinessUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/DisapproveApproveOtherBusinessUser',
    request,
    metadata || {},
    this.methodDescriptorDisapproveApproveOtherBusinessUser);
  }

  methodDescriptorGetAllSecurityQuestions = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GetAllSecurityQuestions',
    grpcWeb.MethodType.UNARY,
    Customer_pb.LanguageOnlyMessage,
    Customer_pb.CustomerSecurityQuestionsList,
    (request: Customer_pb.LanguageOnlyMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.CustomerSecurityQuestionsList.deserializeBinary
  );

  getAllSecurityQuestions(
    request: Customer_pb.LanguageOnlyMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.CustomerSecurityQuestionsList>;

  getAllSecurityQuestions(
    request: Customer_pb.LanguageOnlyMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.CustomerSecurityQuestionsList) => void): grpcWeb.ClientReadableStream<Customer_pb.CustomerSecurityQuestionsList>;

  getAllSecurityQuestions(
    request: Customer_pb.LanguageOnlyMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.CustomerSecurityQuestionsList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GetAllSecurityQuestions',
        request,
        metadata || {},
        this.methodDescriptorGetAllSecurityQuestions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GetAllSecurityQuestions',
    request,
    metadata || {},
    this.methodDescriptorGetAllSecurityQuestions);
  }

  methodDescriptorUpdateCustomerSecurityQuestions = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerSecurityQuestionsForUpdateMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerSecurityQuestionsForUpdateMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  updateCustomerSecurityQuestions(
    request: Customer_pb.CustomerSecurityQuestionsForUpdateMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  updateCustomerSecurityQuestions(
    request: Customer_pb.CustomerSecurityQuestionsForUpdateMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  updateCustomerSecurityQuestions(
    request: Customer_pb.CustomerSecurityQuestionsForUpdateMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
        request,
        metadata || {},
        this.methodDescriptorUpdateCustomerSecurityQuestions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/UpdateCustomerSecurityQuestions',
    request,
    metadata || {},
    this.methodDescriptorUpdateCustomerSecurityQuestions);
  }

  methodDescriptorGetCustomerSecurityQuestionForVerification = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerToGetSecurityQuestionForVerificationRequestMessage,
    Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage,
    (request: Customer_pb.CustomerToGetSecurityQuestionForVerificationRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage.deserializeBinary
  );

  getCustomerSecurityQuestionForVerification(
    request: Customer_pb.CustomerToGetSecurityQuestionForVerificationRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage>;

  getCustomerSecurityQuestionForVerification(
    request: Customer_pb.CustomerToGetSecurityQuestionForVerificationRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage>;

  getCustomerSecurityQuestionForVerification(
    request: Customer_pb.CustomerToGetSecurityQuestionForVerificationRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.CustomerToGetSecurityQuestionForVerificationResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerSecurityQuestionForVerification,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/GetCustomerSecurityQuestionForVerification',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerSecurityQuestionForVerification);
  }

  methodDescriptorVerifyCustomerSecurityAnswer = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
    grpcWeb.MethodType.UNARY,
    Customer_pb.CustomerSecurityQuestionToVerifyRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.CustomerSecurityQuestionToVerifyRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  verifyCustomerSecurityAnswer(
    request: Customer_pb.CustomerSecurityQuestionToVerifyRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  verifyCustomerSecurityAnswer(
    request: Customer_pb.CustomerSecurityQuestionToVerifyRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  verifyCustomerSecurityAnswer(
    request: Customer_pb.CustomerSecurityQuestionToVerifyRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
        request,
        metadata || {},
        this.methodDescriptorVerifyCustomerSecurityAnswer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/VerifyCustomerSecurityAnswer',
    request,
    metadata || {},
    this.methodDescriptorVerifyCustomerSecurityAnswer);
  }

  methodDescriptorValidateCustomerSecurityAnswerAndSixDigitPin = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
    grpcWeb.MethodType.UNARY,
    Customer_pb.ValidateAnswerAndPinRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.ValidateAnswerAndPinRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  validateCustomerSecurityAnswerAndSixDigitPin(
    request: Customer_pb.ValidateAnswerAndPinRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  validateCustomerSecurityAnswerAndSixDigitPin(
    request: Customer_pb.ValidateAnswerAndPinRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  validateCustomerSecurityAnswerAndSixDigitPin(
    request: Customer_pb.ValidateAnswerAndPinRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
        request,
        metadata || {},
        this.methodDescriptorValidateCustomerSecurityAnswerAndSixDigitPin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndSixDigitPin',
    request,
    metadata || {},
    this.methodDescriptorValidateCustomerSecurityAnswerAndSixDigitPin);
  }

  methodDescriptorValidateCustomerSecurityAnswerAndPassword = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
    grpcWeb.MethodType.UNARY,
    Customer_pb.ValidateAnswerAndPasswordRequestMessage,
    Customer_pb.SuccessMessage,
    (request: Customer_pb.ValidateAnswerAndPasswordRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.SuccessMessage.deserializeBinary
  );

  validateCustomerSecurityAnswerAndPassword(
    request: Customer_pb.ValidateAnswerAndPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.SuccessMessage>;

  validateCustomerSecurityAnswerAndPassword(
    request: Customer_pb.ValidateAnswerAndPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.SuccessMessage>;

  validateCustomerSecurityAnswerAndPassword(
    request: Customer_pb.ValidateAnswerAndPasswordRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.SuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
        request,
        metadata || {},
        this.methodDescriptorValidateCustomerSecurityAnswerAndPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/ValidateCustomerSecurityAnswerAndPassword',
    request,
    metadata || {},
    this.methodDescriptorValidateCustomerSecurityAnswerAndPassword);
  }

  methodDescriptorVerifyApiVersionAndAppVersionNoumbers = new grpcWeb.MethodDescriptor(
    '/Customer.CustomerAccount/VerifyApiVersionAndAppVersionNoumbers',
    grpcWeb.MethodType.UNARY,
    Customer_pb.ApiAndAppversionRequestMessage,
    Customer_pb.ApiAndAppversionResponseMessage,
    (request: Customer_pb.ApiAndAppversionRequestMessage) => {
      return request.serializeBinary();
    },
    Customer_pb.ApiAndAppversionResponseMessage.deserializeBinary
  );

  verifyApiVersionAndAppVersionNoumbers(
    request: Customer_pb.ApiAndAppversionRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<Customer_pb.ApiAndAppversionResponseMessage>;

  verifyApiVersionAndAppVersionNoumbers(
    request: Customer_pb.ApiAndAppversionRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Customer_pb.ApiAndAppversionResponseMessage) => void): grpcWeb.ClientReadableStream<Customer_pb.ApiAndAppversionResponseMessage>;

  verifyApiVersionAndAppVersionNoumbers(
    request: Customer_pb.ApiAndAppversionRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Customer_pb.ApiAndAppversionResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Customer.CustomerAccount/VerifyApiVersionAndAppVersionNoumbers',
        request,
        metadata || {},
        this.methodDescriptorVerifyApiVersionAndAppVersionNoumbers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Customer.CustomerAccount/VerifyApiVersionAndAppVersionNoumbers',
    request,
    metadata || {},
    this.methodDescriptorVerifyApiVersionAndAppVersionNoumbers);
  }

}

