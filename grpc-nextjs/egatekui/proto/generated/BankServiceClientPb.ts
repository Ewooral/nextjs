/**
 * @fileoverview gRPC-Web generated client stub for banking
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: bank.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as bank_pb from './bank_pb';


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/banking.AuthService/Register',
    grpcWeb.MethodType.UNARY,
    bank_pb.RegisterRequest,
    bank_pb.RegisterResponse,
    (request: bank_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    bank_pb.RegisterResponse.deserializeBinary
  );

  register(
    request: bank_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.RegisterResponse>;

  register(
    request: bank_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<bank_pb.RegisterResponse>;

  register(
    request: bank_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.RegisterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AuthService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AuthService/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/banking.AuthService/Login',
    grpcWeb.MethodType.UNARY,
    bank_pb.LoginRequest,
    bank_pb.LoginResponse,
    (request: bank_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    bank_pb.LoginResponse.deserializeBinary
  );

  login(
    request: bank_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.LoginResponse>;

  login(
    request: bank_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<bank_pb.LoginResponse>;

  login(
    request: bank_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AuthService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AuthService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorOTP = new grpcWeb.MethodDescriptor(
    '/banking.AuthService/OTP',
    grpcWeb.MethodType.UNARY,
    bank_pb.OTPRequest,
    bank_pb.OTPResponse,
    (request: bank_pb.OTPRequest) => {
      return request.serializeBinary();
    },
    bank_pb.OTPResponse.deserializeBinary
  );

  oTP(
    request: bank_pb.OTPRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.OTPResponse>;

  oTP(
    request: bank_pb.OTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.OTPResponse) => void): grpcWeb.ClientReadableStream<bank_pb.OTPResponse>;

  oTP(
    request: bank_pb.OTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.OTPResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AuthService/OTP',
        request,
        metadata || {},
        this.methodDescriptorOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AuthService/OTP',
    request,
    metadata || {},
    this.methodDescriptorOTP);
  }

  methodDescriptorVerifyOTP = new grpcWeb.MethodDescriptor(
    '/banking.AuthService/VerifyOTP',
    grpcWeb.MethodType.UNARY,
    bank_pb.VerifyOTPRequest,
    bank_pb.VerifyOTPResponse,
    (request: bank_pb.VerifyOTPRequest) => {
      return request.serializeBinary();
    },
    bank_pb.VerifyOTPResponse.deserializeBinary
  );

  verifyOTP(
    request: bank_pb.VerifyOTPRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.VerifyOTPResponse>;

  verifyOTP(
    request: bank_pb.VerifyOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.VerifyOTPResponse) => void): grpcWeb.ClientReadableStream<bank_pb.VerifyOTPResponse>;

  verifyOTP(
    request: bank_pb.VerifyOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.VerifyOTPResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AuthService/VerifyOTP',
        request,
        metadata || {},
        this.methodDescriptorVerifyOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AuthService/VerifyOTP',
    request,
    metadata || {},
    this.methodDescriptorVerifyOTP);
  }

  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/banking.AuthService/ResetPassword',
    grpcWeb.MethodType.UNARY,
    bank_pb.ResetPasswordRequest,
    bank_pb.ResetPasswordResponse,
    (request: bank_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    bank_pb.ResetPasswordResponse.deserializeBinary
  );

  resetPassword(
    request: bank_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.ResetPasswordResponse>;

  resetPassword(
    request: bank_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.ResetPasswordResponse) => void): grpcWeb.ClientReadableStream<bank_pb.ResetPasswordResponse>;

  resetPassword(
    request: bank_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.ResetPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AuthService/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AuthService/ResetPassword',
    request,
    metadata || {},
    this.methodDescriptorResetPassword);
  }

}

export class UsersServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/banking.UsersService/Create',
    grpcWeb.MethodType.UNARY,
    bank_pb.CRUDRequest,
    bank_pb.CRUDResponse,
    (request: bank_pb.CRUDRequest) => {
      return request.serializeBinary();
    },
    bank_pb.CRUDResponse.deserializeBinary
  );

  create(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.CRUDResponse>;

  create(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void): grpcWeb.ClientReadableStream<bank_pb.CRUDResponse>;

  create(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.UsersService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.UsersService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorRead = new grpcWeb.MethodDescriptor(
    '/banking.UsersService/Read',
    grpcWeb.MethodType.UNARY,
    bank_pb.CRUDRequest,
    bank_pb.CRUDResponse,
    (request: bank_pb.CRUDRequest) => {
      return request.serializeBinary();
    },
    bank_pb.CRUDResponse.deserializeBinary
  );

  read(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.CRUDResponse>;

  read(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void): grpcWeb.ClientReadableStream<bank_pb.CRUDResponse>;

  read(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.UsersService/Read',
        request,
        metadata || {},
        this.methodDescriptorRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.UsersService/Read',
    request,
    metadata || {},
    this.methodDescriptorRead);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/banking.UsersService/Update',
    grpcWeb.MethodType.UNARY,
    bank_pb.CRUDRequest,
    bank_pb.CRUDResponse,
    (request: bank_pb.CRUDRequest) => {
      return request.serializeBinary();
    },
    bank_pb.CRUDResponse.deserializeBinary
  );

  update(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.CRUDResponse>;

  update(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void): grpcWeb.ClientReadableStream<bank_pb.CRUDResponse>;

  update(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.UsersService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.UsersService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/banking.UsersService/Delete',
    grpcWeb.MethodType.UNARY,
    bank_pb.CRUDRequest,
    bank_pb.CRUDResponse,
    (request: bank_pb.CRUDRequest) => {
      return request.serializeBinary();
    },
    bank_pb.CRUDResponse.deserializeBinary
  );

  delete(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.CRUDResponse>;

  delete(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void): grpcWeb.ClientReadableStream<bank_pb.CRUDResponse>;

  delete(
    request: bank_pb.CRUDRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.CRUDResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.UsersService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.UsersService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

}

export class AdminServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListUsers = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/ListUsers',
    grpcWeb.MethodType.UNARY,
    bank_pb.AdminRequest,
    bank_pb.AdminResponse,
    (request: bank_pb.AdminRequest) => {
      return request.serializeBinary();
    },
    bank_pb.AdminResponse.deserializeBinary
  );

  listUsers(
    request: bank_pb.AdminRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.AdminResponse>;

  listUsers(
    request: bank_pb.AdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.AdminResponse) => void): grpcWeb.ClientReadableStream<bank_pb.AdminResponse>;

  listUsers(
    request: bank_pb.AdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.AdminResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/ListUsers',
        request,
        metadata || {},
        this.methodDescriptorListUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/ListUsers',
    request,
    metadata || {},
    this.methodDescriptorListUsers);
  }

  methodDescriptorCreateAdminUser = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/CreateAdminUser',
    grpcWeb.MethodType.UNARY,
    bank_pb.CreateAdminUserRequest,
    bank_pb.CreateAdminUserResponse,
    (request: bank_pb.CreateAdminUserRequest) => {
      return request.serializeBinary();
    },
    bank_pb.CreateAdminUserResponse.deserializeBinary
  );

  createAdminUser(
    request: bank_pb.CreateAdminUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.CreateAdminUserResponse>;

  createAdminUser(
    request: bank_pb.CreateAdminUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.CreateAdminUserResponse) => void): grpcWeb.ClientReadableStream<bank_pb.CreateAdminUserResponse>;

  createAdminUser(
    request: bank_pb.CreateAdminUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.CreateAdminUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/CreateAdminUser',
        request,
        metadata || {},
        this.methodDescriptorCreateAdminUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/CreateAdminUser',
    request,
    metadata || {},
    this.methodDescriptorCreateAdminUser);
  }

  methodDescriptorUpdateUserRole = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/UpdateUserRole',
    grpcWeb.MethodType.UNARY,
    bank_pb.UpdateUserRoleRequest,
    bank_pb.UpdateUserRoleResponse,
    (request: bank_pb.UpdateUserRoleRequest) => {
      return request.serializeBinary();
    },
    bank_pb.UpdateUserRoleResponse.deserializeBinary
  );

  updateUserRole(
    request: bank_pb.UpdateUserRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.UpdateUserRoleResponse>;

  updateUserRole(
    request: bank_pb.UpdateUserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.UpdateUserRoleResponse) => void): grpcWeb.ClientReadableStream<bank_pb.UpdateUserRoleResponse>;

  updateUserRole(
    request: bank_pb.UpdateUserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.UpdateUserRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/UpdateUserRole',
        request,
        metadata || {},
        this.methodDescriptorUpdateUserRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/UpdateUserRole',
    request,
    metadata || {},
    this.methodDescriptorUpdateUserRole);
  }

  methodDescriptorBanUser = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/BanUser',
    grpcWeb.MethodType.UNARY,
    bank_pb.BanUserRequest,
    bank_pb.BanUserResponse,
    (request: bank_pb.BanUserRequest) => {
      return request.serializeBinary();
    },
    bank_pb.BanUserResponse.deserializeBinary
  );

  banUser(
    request: bank_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.BanUserResponse>;

  banUser(
    request: bank_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.BanUserResponse) => void): grpcWeb.ClientReadableStream<bank_pb.BanUserResponse>;

  banUser(
    request: bank_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.BanUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/BanUser',
        request,
        metadata || {},
        this.methodDescriptorBanUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/BanUser',
    request,
    metadata || {},
    this.methodDescriptorBanUser);
  }

  methodDescriptorViewUserActivityLog = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/ViewUserActivityLog',
    grpcWeb.MethodType.UNARY,
    bank_pb.ViewUserActivityLogRequest,
    bank_pb.ViewUserActivityLogResponse,
    (request: bank_pb.ViewUserActivityLogRequest) => {
      return request.serializeBinary();
    },
    bank_pb.ViewUserActivityLogResponse.deserializeBinary
  );

  viewUserActivityLog(
    request: bank_pb.ViewUserActivityLogRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.ViewUserActivityLogResponse>;

  viewUserActivityLog(
    request: bank_pb.ViewUserActivityLogRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.ViewUserActivityLogResponse) => void): grpcWeb.ClientReadableStream<bank_pb.ViewUserActivityLogResponse>;

  viewUserActivityLog(
    request: bank_pb.ViewUserActivityLogRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.ViewUserActivityLogResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/ViewUserActivityLog',
        request,
        metadata || {},
        this.methodDescriptorViewUserActivityLog,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/ViewUserActivityLog',
    request,
    metadata || {},
    this.methodDescriptorViewUserActivityLog);
  }

  methodDescriptorGenerateReports = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/GenerateReports',
    grpcWeb.MethodType.UNARY,
    bank_pb.GenerateReportsRequest,
    bank_pb.GenerateReportsResponse,
    (request: bank_pb.GenerateReportsRequest) => {
      return request.serializeBinary();
    },
    bank_pb.GenerateReportsResponse.deserializeBinary
  );

  generateReports(
    request: bank_pb.GenerateReportsRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.GenerateReportsResponse>;

  generateReports(
    request: bank_pb.GenerateReportsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.GenerateReportsResponse) => void): grpcWeb.ClientReadableStream<bank_pb.GenerateReportsResponse>;

  generateReports(
    request: bank_pb.GenerateReportsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.GenerateReportsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/GenerateReports',
        request,
        metadata || {},
        this.methodDescriptorGenerateReports,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/GenerateReports',
    request,
    metadata || {},
    this.methodDescriptorGenerateReports);
  }

  methodDescriptorConfigureSystemSettings = new grpcWeb.MethodDescriptor(
    '/banking.AdminService/ConfigureSystemSettings',
    grpcWeb.MethodType.UNARY,
    bank_pb.ConfigureSystemSettingsRequest,
    bank_pb.ConfigureSystemSettingsResponse,
    (request: bank_pb.ConfigureSystemSettingsRequest) => {
      return request.serializeBinary();
    },
    bank_pb.ConfigureSystemSettingsResponse.deserializeBinary
  );

  configureSystemSettings(
    request: bank_pb.ConfigureSystemSettingsRequest,
    metadata: grpcWeb.Metadata | null): Promise<bank_pb.ConfigureSystemSettingsResponse>;

  configureSystemSettings(
    request: bank_pb.ConfigureSystemSettingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bank_pb.ConfigureSystemSettingsResponse) => void): grpcWeb.ClientReadableStream<bank_pb.ConfigureSystemSettingsResponse>;

  configureSystemSettings(
    request: bank_pb.ConfigureSystemSettingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bank_pb.ConfigureSystemSettingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/banking.AdminService/ConfigureSystemSettings',
        request,
        metadata || {},
        this.methodDescriptorConfigureSystemSettings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/banking.AdminService/ConfigureSystemSettings',
    request,
    metadata || {},
    this.methodDescriptorConfigureSystemSettings);
  }

}

