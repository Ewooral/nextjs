# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import workers_pb2 as workers__pb2


class WorkersManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWorker = channel.unary_unary(
                '/workers_management_service.WorkersManagementService/CreateWorker',
                request_serializer=workers__pb2.CreateWorkerRequest.SerializeToString,
                response_deserializer=workers__pb2.CreateWorkerResponse.FromString,
                )
        self.GetWorker = channel.unary_unary(
                '/workers_management_service.WorkersManagementService/GetWorker',
                request_serializer=workers__pb2.GetWorkerRequest.SerializeToString,
                response_deserializer=workers__pb2.GetWorkerResponse.FromString,
                )
        self.UpdateWorker = channel.unary_unary(
                '/workers_management_service.WorkersManagementService/UpdateWorker',
                request_serializer=workers__pb2.UpdateWorkerRequest.SerializeToString,
                response_deserializer=workers__pb2.UpdateWorkerResponse.FromString,
                )
        self.DeleteWorker = channel.unary_unary(
                '/workers_management_service.WorkersManagementService/DeleteWorker',
                request_serializer=workers__pb2.DeleteWorkerRequest.SerializeToString,
                response_deserializer=workers__pb2.DeleteWorkerResponse.FromString,
                )
        self.ListWorkers = channel.unary_unary(
                '/workers_management_service.WorkersManagementService/ListWorkers',
                request_serializer=workers__pb2.ListWorkersRequest.SerializeToString,
                response_deserializer=workers__pb2.ListWorkersResponse.FromString,
                )


class WorkersManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkersManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorker,
                    request_deserializer=workers__pb2.CreateWorkerRequest.FromString,
                    response_serializer=workers__pb2.CreateWorkerResponse.SerializeToString,
            ),
            'GetWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorker,
                    request_deserializer=workers__pb2.GetWorkerRequest.FromString,
                    response_serializer=workers__pb2.GetWorkerResponse.SerializeToString,
            ),
            'UpdateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorker,
                    request_deserializer=workers__pb2.UpdateWorkerRequest.FromString,
                    response_serializer=workers__pb2.UpdateWorkerResponse.SerializeToString,
            ),
            'DeleteWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorker,
                    request_deserializer=workers__pb2.DeleteWorkerRequest.FromString,
                    response_serializer=workers__pb2.DeleteWorkerResponse.SerializeToString,
            ),
            'ListWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkers,
                    request_deserializer=workers__pb2.ListWorkersRequest.FromString,
                    response_serializer=workers__pb2.ListWorkersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workers_management_service.WorkersManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkersManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workers_management_service.WorkersManagementService/CreateWorker',
            workers__pb2.CreateWorkerRequest.SerializeToString,
            workers__pb2.CreateWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workers_management_service.WorkersManagementService/GetWorker',
            workers__pb2.GetWorkerRequest.SerializeToString,
            workers__pb2.GetWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workers_management_service.WorkersManagementService/UpdateWorker',
            workers__pb2.UpdateWorkerRequest.SerializeToString,
            workers__pb2.UpdateWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workers_management_service.WorkersManagementService/DeleteWorker',
            workers__pb2.DeleteWorkerRequest.SerializeToString,
            workers__pb2.DeleteWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workers_management_service.WorkersManagementService/ListWorkers',
            workers__pb2.ListWorkersRequest.SerializeToString,
            workers__pb2.ListWorkersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
